// Code generated by protoc-gen-go.
// source: archi.proto
// DO NOT EDIT!

/*
Package archipb is a generated protocol buffer package.

It is generated from these files:
	archi.proto

It has these top-level messages:
	Question
	CreateQuestionReq
	CreateQuestionResp
	UpdateQuestionReq
	UpdateQuestionResp
	GetQuestionReq
	GetQuestionResp
	GetQuestionListReq
	GetQuestionListResp
*/
package archipb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Question struct {
	ID          string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty"`
	Content     string `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty"`
	CreateTime  int64  `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty"`
	FollowCount int64  `protobuf:"varint,6,opt,name=FollowCount" json:"FollowCount,omitempty"`
}

func (m *Question) Reset()                    { *m = Question{} }
func (m *Question) String() string            { return proto.CompactTextString(m) }
func (*Question) ProtoMessage()               {}
func (*Question) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Question) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Question) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Question) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Question) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Question) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Question) GetFollowCount() int64 {
	if m != nil {
		return m.FollowCount
	}
	return 0
}

type CreateQuestionReq struct {
	UserID          string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	QuestionTitle   string `protobuf:"bytes,2,opt,name=QuestionTitle" json:"QuestionTitle,omitempty"`
	QuestionContent string `protobuf:"bytes,3,opt,name=QuestionContent" json:"QuestionContent,omitempty"`
}

func (m *CreateQuestionReq) Reset()                    { *m = CreateQuestionReq{} }
func (m *CreateQuestionReq) String() string            { return proto.CompactTextString(m) }
func (*CreateQuestionReq) ProtoMessage()               {}
func (*CreateQuestionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateQuestionReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *CreateQuestionReq) GetQuestionTitle() string {
	if m != nil {
		return m.QuestionTitle
	}
	return ""
}

func (m *CreateQuestionReq) GetQuestionContent() string {
	if m != nil {
		return m.QuestionContent
	}
	return ""
}

type CreateQuestionResp struct {
	Quest *Question `protobuf:"bytes,1,opt,name=Quest" json:"Quest,omitempty"`
}

func (m *CreateQuestionResp) Reset()                    { *m = CreateQuestionResp{} }
func (m *CreateQuestionResp) String() string            { return proto.CompactTextString(m) }
func (*CreateQuestionResp) ProtoMessage()               {}
func (*CreateQuestionResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateQuestionResp) GetQuest() *Question {
	if m != nil {
		return m.Quest
	}
	return nil
}

type UpdateQuestionReq struct {
	UserID  string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	ID      string `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	Title   string `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty"`
	Content string `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty"`
}

func (m *UpdateQuestionReq) Reset()                    { *m = UpdateQuestionReq{} }
func (m *UpdateQuestionReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateQuestionReq) ProtoMessage()               {}
func (*UpdateQuestionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateQuestionReq) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpdateQuestionReq) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *UpdateQuestionReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateQuestionReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type UpdateQuestionResp struct {
	Quest *Question `protobuf:"bytes,1,opt,name=Quest" json:"Quest,omitempty"`
}

func (m *UpdateQuestionResp) Reset()                    { *m = UpdateQuestionResp{} }
func (m *UpdateQuestionResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateQuestionResp) ProtoMessage()               {}
func (*UpdateQuestionResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateQuestionResp) GetQuest() *Question {
	if m != nil {
		return m.Quest
	}
	return nil
}

type GetQuestionReq struct {
	QuestionID string `protobuf:"bytes,1,opt,name=QuestionID" json:"QuestionID,omitempty"`
}

func (m *GetQuestionReq) Reset()                    { *m = GetQuestionReq{} }
func (m *GetQuestionReq) String() string            { return proto.CompactTextString(m) }
func (*GetQuestionReq) ProtoMessage()               {}
func (*GetQuestionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetQuestionReq) GetQuestionID() string {
	if m != nil {
		return m.QuestionID
	}
	return ""
}

type GetQuestionResp struct {
	Quest *Question `protobuf:"bytes,1,opt,name=Quest" json:"Quest,omitempty"`
}

func (m *GetQuestionResp) Reset()                    { *m = GetQuestionResp{} }
func (m *GetQuestionResp) String() string            { return proto.CompactTextString(m) }
func (*GetQuestionResp) ProtoMessage()               {}
func (*GetQuestionResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetQuestionResp) GetQuest() *Question {
	if m != nil {
		return m.Quest
	}
	return nil
}

type GetQuestionListReq struct {
	PreviousPageNum int32 `protobuf:"varint,1,opt,name=PreviousPageNum" json:"PreviousPageNum,omitempty"`
	PerPage         int32 `protobuf:"varint,2,opt,name=PerPage" json:"PerPage,omitempty"`
}

func (m *GetQuestionListReq) Reset()                    { *m = GetQuestionListReq{} }
func (m *GetQuestionListReq) String() string            { return proto.CompactTextString(m) }
func (*GetQuestionListReq) ProtoMessage()               {}
func (*GetQuestionListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetQuestionListReq) GetPreviousPageNum() int32 {
	if m != nil {
		return m.PreviousPageNum
	}
	return 0
}

func (m *GetQuestionListReq) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type GetQuestionListResp struct {
	QList      []*Question `protobuf:"bytes,1,rep,name=QList" json:"QList,omitempty"`
	HasNext    bool        `protobuf:"varint,2,opt,name=HasNext" json:"HasNext,omitempty"`
	TotalCount int64       `protobuf:"varint,3,opt,name=TotalCount" json:"TotalCount,omitempty"`
}

func (m *GetQuestionListResp) Reset()                    { *m = GetQuestionListResp{} }
func (m *GetQuestionListResp) String() string            { return proto.CompactTextString(m) }
func (*GetQuestionListResp) ProtoMessage()               {}
func (*GetQuestionListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetQuestionListResp) GetQList() []*Question {
	if m != nil {
		return m.QList
	}
	return nil
}

func (m *GetQuestionListResp) GetHasNext() bool {
	if m != nil {
		return m.HasNext
	}
	return false
}

func (m *GetQuestionListResp) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Question)(nil), "archipb.Question")
	proto.RegisterType((*CreateQuestionReq)(nil), "archipb.CreateQuestionReq")
	proto.RegisterType((*CreateQuestionResp)(nil), "archipb.CreateQuestionResp")
	proto.RegisterType((*UpdateQuestionReq)(nil), "archipb.UpdateQuestionReq")
	proto.RegisterType((*UpdateQuestionResp)(nil), "archipb.UpdateQuestionResp")
	proto.RegisterType((*GetQuestionReq)(nil), "archipb.GetQuestionReq")
	proto.RegisterType((*GetQuestionResp)(nil), "archipb.GetQuestionResp")
	proto.RegisterType((*GetQuestionListReq)(nil), "archipb.GetQuestionListReq")
	proto.RegisterType((*GetQuestionListResp)(nil), "archipb.GetQuestionListResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Archi service

type ArchiClient interface {
	CreateQuestion(ctx context.Context, in *CreateQuestionReq, opts ...grpc.CallOption) (*CreateQuestionResp, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionReq, opts ...grpc.CallOption) (*UpdateQuestionResp, error)
	GetQuestion(ctx context.Context, in *GetQuestionReq, opts ...grpc.CallOption) (*GetQuestionResp, error)
	GetQuestionList(ctx context.Context, in *GetQuestionListReq, opts ...grpc.CallOption) (*GetQuestionListResp, error)
}

type archiClient struct {
	cc *grpc.ClientConn
}

func NewArchiClient(cc *grpc.ClientConn) ArchiClient {
	return &archiClient{cc}
}

func (c *archiClient) CreateQuestion(ctx context.Context, in *CreateQuestionReq, opts ...grpc.CallOption) (*CreateQuestionResp, error) {
	out := new(CreateQuestionResp)
	err := grpc.Invoke(ctx, "/archipb.Archi/CreateQuestion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionReq, opts ...grpc.CallOption) (*UpdateQuestionResp, error) {
	out := new(UpdateQuestionResp)
	err := grpc.Invoke(ctx, "/archipb.Archi/UpdateQuestion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiClient) GetQuestion(ctx context.Context, in *GetQuestionReq, opts ...grpc.CallOption) (*GetQuestionResp, error) {
	out := new(GetQuestionResp)
	err := grpc.Invoke(ctx, "/archipb.Archi/GetQuestion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiClient) GetQuestionList(ctx context.Context, in *GetQuestionListReq, opts ...grpc.CallOption) (*GetQuestionListResp, error) {
	out := new(GetQuestionListResp)
	err := grpc.Invoke(ctx, "/archipb.Archi/GetQuestionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Archi service

type ArchiServer interface {
	CreateQuestion(context.Context, *CreateQuestionReq) (*CreateQuestionResp, error)
	UpdateQuestion(context.Context, *UpdateQuestionReq) (*UpdateQuestionResp, error)
	GetQuestion(context.Context, *GetQuestionReq) (*GetQuestionResp, error)
	GetQuestionList(context.Context, *GetQuestionListReq) (*GetQuestionListResp, error)
}

func RegisterArchiServer(s *grpc.Server, srv ArchiServer) {
	s.RegisterService(&_Archi_serviceDesc, srv)
}

func _Archi_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archipb.Archi/CreateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiServer).CreateQuestion(ctx, req.(*CreateQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archi_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archipb.Archi/UpdateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiServer).UpdateQuestion(ctx, req.(*UpdateQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archi_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archipb.Archi/GetQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiServer).GetQuestion(ctx, req.(*GetQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archi_GetQuestionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiServer).GetQuestionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archipb.Archi/GetQuestionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiServer).GetQuestionList(ctx, req.(*GetQuestionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Archi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "archipb.Archi",
	HandlerType: (*ArchiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _Archi_CreateQuestion_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _Archi_UpdateQuestion_Handler,
		},
		{
			MethodName: "GetQuestion",
			Handler:    _Archi_GetQuestion_Handler,
		},
		{
			MethodName: "GetQuestionList",
			Handler:    _Archi_GetQuestionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "archi.proto",
}

func init() { proto.RegisterFile("archi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xd1, 0xaa, 0xd3, 0x40,
	0x10, 0xbd, 0x49, 0x4c, 0xef, 0x75, 0x82, 0x2d, 0x5d, 0x45, 0x97, 0x54, 0x4a, 0x58, 0x04, 0xf3,
	0x54, 0xa4, 0xbe, 0x09, 0x3e, 0x68, 0x8b, 0x5a, 0x94, 0x52, 0x43, 0x0b, 0xbe, 0xa6, 0xba, 0x68,
	0x30, 0xcd, 0xc6, 0x64, 0xa3, 0x05, 0x7f, 0xc7, 0x5f, 0xf0, 0xff, 0x64, 0x77, 0xb3, 0x71, 0x93,
	0xb4, 0x70, 0xfb, 0x78, 0xce, 0xcc, 0x9e, 0x39, 0x39, 0x33, 0x04, 0xbc, 0xb8, 0xf8, 0xfc, 0x2d,
	0x99, 0xe5, 0x05, 0xe3, 0x0c, 0x5d, 0x4b, 0x90, 0xef, 0xc9, 0x1f, 0x0b, 0x6e, 0x3e, 0x56, 0xb4,
	0xe4, 0x09, 0xcb, 0xd0, 0x10, 0xec, 0xd5, 0x12, 0x5b, 0x81, 0x15, 0xde, 0x8d, 0xec, 0xd5, 0x12,
	0x3d, 0x84, 0xc1, 0xae, 0xa4, 0xc5, 0x6a, 0x89, 0x6d, 0xc9, 0xd5, 0x08, 0x3d, 0x00, 0x77, 0x9b,
	0xf0, 0x94, 0x62, 0x47, 0xd2, 0x0a, 0x20, 0x0c, 0xd7, 0x0b, 0x96, 0x71, 0x9a, 0x71, 0x7c, 0x47,
	0xf2, 0x1a, 0xa2, 0x29, 0xc0, 0xa2, 0xa0, 0x31, 0xa7, 0xdb, 0xe4, 0x40, 0xb1, 0x1b, 0x58, 0xa1,
	0x13, 0x19, 0x0c, 0x0a, 0xc0, 0x7b, 0xc3, 0xd2, 0x94, 0xfd, 0x5a, 0xb0, 0x2a, 0xe3, 0x78, 0x20,
	0x1b, 0x4c, 0x8a, 0xfc, 0x86, 0xb1, 0xea, 0xd7, 0x5e, 0x23, 0xfa, 0xc3, 0xb0, 0x67, 0xb5, 0xec,
	0x3d, 0x81, 0x7b, 0xba, 0x4d, 0xd9, 0x54, 0xee, 0xdb, 0x24, 0x0a, 0x61, 0xa4, 0x09, 0x6d, 0x5b,
	0x7d, 0x4e, 0x97, 0x26, 0x2f, 0x01, 0x75, 0x87, 0x97, 0x39, 0x7a, 0x0a, 0xae, 0xc4, 0x72, 0xb8,
	0x37, 0x1f, 0xcf, 0xea, 0x48, 0x67, 0x4d, 0x97, 0xaa, 0x93, 0xef, 0x30, 0xde, 0xe5, 0x5f, 0x6e,
	0xe9, 0x5d, 0xad, 0xc0, 0x6e, 0x56, 0x70, 0x61, 0xd4, 0xc2, 0x6b, 0x77, 0xd8, 0x25, 0x5e, 0x9f,
	0xc1, 0xf0, 0x2d, 0xe5, 0xa6, 0xd1, 0x29, 0x80, 0x86, 0x8d, 0x59, 0x83, 0x21, 0x2f, 0x60, 0xd4,
	0x7a, 0x71, 0xc9, 0xb4, 0x4f, 0x80, 0x8c, 0xb7, 0x1f, 0x92, 0x92, 0x8b, 0x89, 0x21, 0x8c, 0x36,
	0x05, 0xfd, 0x99, 0xb0, 0xaa, 0xdc, 0xc4, 0x5f, 0xe9, 0xba, 0x3a, 0x48, 0x21, 0x37, 0xea, 0xd2,
	0x22, 0x86, 0x0d, 0x2d, 0x04, 0x92, 0x89, 0xb9, 0x91, 0x86, 0xe4, 0x08, 0xf7, 0x7b, 0xca, 0xb5,
	0x33, 0x01, 0xb0, 0x15, 0x38, 0xe7, 0x9c, 0x89, 0xba, 0x50, 0x7e, 0x17, 0x97, 0x6b, 0x7a, 0xe4,
	0x52, 0xf9, 0x26, 0xd2, 0x50, 0xe4, 0xb1, 0x65, 0x3c, 0x4e, 0xd5, 0xa9, 0x3a, 0xea, 0x96, 0xff,
	0x33, 0xf3, 0xbf, 0x36, 0xb8, 0xaf, 0x84, 0x2a, 0x7a, 0x0f, 0xc3, 0xf6, 0xd9, 0x20, 0xbf, 0x99,
	0xd7, 0x3b, 0x66, 0x7f, 0x72, 0xb6, 0x56, 0xe6, 0xe4, 0x4a, 0x88, 0xb5, 0xf7, 0x6a, 0x88, 0xf5,
	0xae, 0xcb, 0x10, 0xeb, 0x1f, 0x03, 0xb9, 0x42, 0xaf, 0xc1, 0x33, 0xd2, 0x41, 0x8f, 0x9a, 0xee,
	0xf6, 0xee, 0x7d, 0x7c, 0xba, 0x20, 0x35, 0xd6, 0xad, 0xbd, 0xcb, 0xd0, 0x26, 0xa7, 0xda, 0xeb,
	0xad, 0xfa, 0x8f, 0xcf, 0x17, 0x85, 0xde, 0x7e, 0x20, 0x7f, 0x4c, 0xcf, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xe7, 0x40, 0xeb, 0x88, 0xa7, 0x04, 0x00, 0x00,
}
